// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kernYrRcpp
arma::mat kernYrRcpp(arma::mat dmat, arma::mat fec, arma::uvec years, arma::uvec seedyear, arma::uvec treeyear, arma::uvec seedrow, arma::uvec treecol);
RcppExport SEXP _mastif_kernYrRcpp(SEXP dmatSEXP, SEXP fecSEXP, SEXP yearsSEXP, SEXP seedyearSEXP, SEXP treeyearSEXP, SEXP seedrowSEXP, SEXP treecolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fec(fecSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type years(yearsSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seedyear(seedyearSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type treeyear(treeyearSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type seedrow(seedrowSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type treecol(treecolSEXP);
    rcpp_result_gen = Rcpp::wrap(kernYrRcpp(dmat, fec, years, seedyear, treeyear, seedrow, treecol));
    return rcpp_result_gen;
END_RCPP
}
// byRcpp
Rcpp::List byRcpp(const int nr, const arma::mat frommat, arma::mat totmat, arma::mat summat, arma::mat minmat, arma::mat maxmat);
RcppExport SEXP _mastif_byRcpp(SEXP nrSEXP, SEXP frommatSEXP, SEXP totmatSEXP, SEXP summatSEXP, SEXP minmatSEXP, SEXP maxmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type nr(nrSEXP);
    Rcpp::traits::input_parameter< const arma::mat >::type frommat(frommatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type totmat(totmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type summat(summatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type minmat(minmatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type maxmat(maxmatSEXP);
    rcpp_result_gen = Rcpp::wrap(byRcpp(nr, frommat, totmat, summat, minmat, maxmat));
    return rcpp_result_gen;
END_RCPP
}
// tnormRcpp
double tnormRcpp(double lo, double hi, double mu, double sig);
RcppExport SEXP _mastif_tnormRcpp(SEXP loSEXP, SEXP hiSEXP, SEXP muSEXP, SEXP sigSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lo(loSEXP);
    Rcpp::traits::input_parameter< double >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< double >::type sig(sigSEXP);
    rcpp_result_gen = Rcpp::wrap(tnormRcpp(lo, hi, mu, sig));
    return rcpp_result_gen;
END_RCPP
}
// trMVNmatrixRcpp
arma::mat trMVNmatrixRcpp(arma::mat avec, arma::mat muvec, arma::mat smat, arma::mat lo, arma::mat hi, arma::uvec whichSample, arma::uvec idxALL);
RcppExport SEXP _mastif_trMVNmatrixRcpp(SEXP avecSEXP, SEXP muvecSEXP, SEXP smatSEXP, SEXP loSEXP, SEXP hiSEXP, SEXP whichSampleSEXP, SEXP idxALLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type avec(avecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type muvec(muvecSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type smat(smatSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type lo(loSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type hi(hiSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type whichSample(whichSampleSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type idxALL(idxALLSEXP);
    rcpp_result_gen = Rcpp::wrap(trMVNmatrixRcpp(avec, muvec, smat, lo, hi, whichSample, idxALL));
    return rcpp_result_gen;
END_RCPP
}
// betaRcpp
arma::mat betaRcpp(int n, arma::mat X, arma::vec y, double sigma, arma::mat AI);
RcppExport SEXP _mastif_betaRcpp(SEXP nSEXP, SEXP XSEXP, SEXP ySEXP, SEXP sigmaSEXP, SEXP AISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AI(AISEXP);
    rcpp_result_gen = Rcpp::wrap(betaRcpp(n, X, y, sigma, AI));
    return rcpp_result_gen;
END_RCPP
}
// randEffectRcpp
arma::mat randEffectRcpp(arma::uvec gindex, arma::uvec groups, arma::mat X, arma::colvec y, double sigma, arma::mat AI);
RcppExport SEXP _mastif_randEffectRcpp(SEXP gindexSEXP, SEXP groupsSEXP, SEXP XSEXP, SEXP ySEXP, SEXP sigmaSEXP, SEXP AISEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::uvec >::type gindex(gindexSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type groups(groupsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type AI(AISEXP);
    rcpp_result_gen = Rcpp::wrap(randEffectRcpp(gindex, groups, X, y, sigma, AI));
    return rcpp_result_gen;
END_RCPP
}
// solveRcpp
arma::mat solveRcpp(arma::mat A);
RcppExport SEXP _mastif_solveRcpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(solveRcpp(A));
    return rcpp_result_gen;
END_RCPP
}
// rmvnormRcpp
arma::mat rmvnormRcpp(int n, arma::vec mu, arma::mat sigma);
RcppExport SEXP _mastif_rmvnormRcpp(SEXP nSEXP, SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(rmvnormRcpp(n, mu, sigma));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mastif_kernYrRcpp", (DL_FUNC) &_mastif_kernYrRcpp, 7},
    {"_mastif_byRcpp", (DL_FUNC) &_mastif_byRcpp, 6},
    {"_mastif_tnormRcpp", (DL_FUNC) &_mastif_tnormRcpp, 4},
    {"_mastif_trMVNmatrixRcpp", (DL_FUNC) &_mastif_trMVNmatrixRcpp, 7},
    {"_mastif_betaRcpp", (DL_FUNC) &_mastif_betaRcpp, 5},
    {"_mastif_randEffectRcpp", (DL_FUNC) &_mastif_randEffectRcpp, 6},
    {"_mastif_solveRcpp", (DL_FUNC) &_mastif_solveRcpp, 1},
    {"_mastif_rmvnormRcpp", (DL_FUNC) &_mastif_rmvnormRcpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_mastif(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
